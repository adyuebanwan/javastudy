package org.hedy.javastudy.j2se.collection.concurrent;

/**
 * Created by hzhedongyu on 2015/11/23.
 * 队列
 场景
 优点
 缺点
 ConcurrentLinkedQueue
 Queue的最佳线程安全版本，在不适用阻塞功能下几乎是最有效的
 使用原子操作，效率高，同时是一种无界的队列
 不能阻塞线程，同时无法直接获取队列大小，也不能控制队列的容量
 LinkedBlockingQueue
 基于链表的Queue的可阻塞线程安全
 可阻塞，入出队列锁分离，效率高，支
 由于存在锁机制，同时链表需要遍历才
 版本，在需要阻塞且无界的环境下，这是一种不错的选择
 持容量限制，可以作为无界的队列实现
 能准确定位元素，因此效率有一定的影响
 ArrayBlockingQueue
 基于数组的Queue的可阻塞线程安全版本，在容量固定的环境下，这是一种不错的选择
 可阻塞，入出队列效率更高，同时能省内存，遍历元素更快
 容量固定，不能扩容，入出队列不能同时进行
 PriorityBlockingQueue
 按照自然排序实现的阻塞队列，在元素需要排序的情况下是唯一的选择
 可阻塞，元素有序，能够自动扩容
 出入队列比较慢，效率比较低，基于数组实现，每次扩容需要数组复制，同时容量不能减小，入队列不能够被阻塞
 SynchronousQueue
 一种直接交换元素的实现，在这快速处理任务队列是最有效的方式
 可阻塞，快速交换队列
 内部没有容量
 DelayQueue
 延时处理队列的是吸纳，队列的每个元素都有一个延时时间过期后才能出队列
 可阻塞，可延时
 基于排序的Queue实现，效率很低，入队列不能够被阻塞
 */
public class Info {
}
